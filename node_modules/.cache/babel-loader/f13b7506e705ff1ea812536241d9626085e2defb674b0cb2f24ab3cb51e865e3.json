{"ast":null,"code":"import { BASE_URL } from \"../constants\";\nexport const FETCH_INGREDIENTS_REQUEST = \"FETCH_INGREDIENTS_REQUEST\";\nexport const FETCH_INGREDIENTS_SUCCESS = \"FETCH_INGREDIENTS_SUCCESS\";\nexport const FETCH_INGREDIENTS_FAILURE = \"FETCH_INGREDIENTS_FAILURE\";\n\n// Создаем типизацию \nexport let TypeActions = /*#__PURE__*/function (TypeActions) {\n  TypeActions[\"FETCH_INGREDIENTS_REQUEST\"] = \"FETCH_INGREDIENTS_REQUEST\";\n  TypeActions[\"FETCH_INGREDIENTS_SUCCESS\"] = \"FETCH_INGREDIENTS_SUCCESS\";\n  TypeActions[\"FETCH_INGREDIENTS_FAILURE\"] = \"FETCH_INGREDIENTS_FAILURE\";\n  return TypeActions;\n}({});\n//указываем типы\n\nexport const fetchIngredientsRequest = () => ({\n  type: TypeActions.FETCH_INGREDIENTS_REQUEST\n});\nexport const fetchIngredientsSuccess = ingredients => ({\n  type: TypeActions.FETCH_INGREDIENTS_SUCCESS,\n  payload: ingredients\n});\nexport const fetchIngredientsFailure = error => ({\n  type: TypeActions.FETCH_INGREDIENTS_FAILURE,\n  payload: error\n});\nexport const fetchIngredients = () => {\n  return async dispatch => {\n    dispatch(fetchIngredientsRequest());\n    try {\n      const response = await fetch(`${BASE_URL}/ingredients`);\n      const data = await response.json();\n      dispatch(fetchIngredientsSuccess(data.data));\n    } catch (error) {\n      dispatch(fetchIngredientsFailure(error.message));\n    }\n  };\n};","map":{"version":3,"names":["BASE_URL","FETCH_INGREDIENTS_REQUEST","FETCH_INGREDIENTS_SUCCESS","FETCH_INGREDIENTS_FAILURE","TypeActions","fetchIngredientsRequest","type","fetchIngredientsSuccess","ingredients","payload","fetchIngredientsFailure","error","fetchIngredients","dispatch","response","fetch","data","json","message"],"sources":["C:/YandexPracticum/step-2 — копия (3) — копия/src/services/actions/ingredientsActions.tsx"],"sourcesContent":["\r\nimport { BASE_URL } from \"../constants\";\r\nimport { Product } from \"../../types/Product\";\r\n\r\nexport const FETCH_INGREDIENTS_REQUEST = \"FETCH_INGREDIENTS_REQUEST\";\r\nexport const FETCH_INGREDIENTS_SUCCESS = \"FETCH_INGREDIENTS_SUCCESS\";\r\nexport const FETCH_INGREDIENTS_FAILURE = \"FETCH_INGREDIENTS_FAILURE\";\r\n\r\n// Создаем типизацию \r\nexport enum TypeActions {\r\n  FETCH_INGREDIENTS_REQUEST = \"FETCH_INGREDIENTS_REQUEST\",\r\n  FETCH_INGREDIENTS_SUCCESS = \"FETCH_INGREDIENTS_SUCCESS\",\r\n  FETCH_INGREDIENTS_FAILURE = \"FETCH_INGREDIENTS_FAILURE\",\r\n}\r\n\r\ninterface FetchIngredientsRequestAction {\r\n  type: TypeActions.FETCH_INGREDIENTS_REQUEST;\r\n}\r\n\r\n interface FetchIngredientsSuccessAction {\r\n  type: TypeActions.FETCH_INGREDIENTS_SUCCESS;\r\n  payload: Product[];\r\n}\r\n\r\ninterface FetchIngredientsFailurAction {\r\n  type: TypeActions.FETCH_INGREDIENTS_FAILURE;\r\n  payload: string;\r\n}\r\n\r\ntype IngredientsActionTypes =\r\n  | FetchIngredientsRequestAction\r\n  | FetchIngredientsSuccessAction\r\n  | FetchIngredientsFailurAction;\r\n\r\n//указываем типы\r\n\r\nexport const fetchIngredientsRequest = (): FetchIngredientsRequestAction => ({\r\n  type: TypeActions.FETCH_INGREDIENTS_REQUEST,\r\n});\r\n\r\nexport const fetchIngredientsSuccess = (\r\n  ingredients: Product[]\r\n): FetchIngredientsSuccessAction => ({\r\n  type: TypeActions.FETCH_INGREDIENTS_SUCCESS,\r\n  payload: ingredients,\r\n});\r\n\r\nexport const fetchIngredientsFailure = (\r\n  error: string\r\n): FetchIngredientsFailurAction => ({\r\n  type: TypeActions.FETCH_INGREDIENTS_FAILURE,\r\n  payload: error,\r\n});\r\n\r\nexport const fetchIngredients = () => {\r\n    return async (dispatch:( action: IngredientsActionTypes) => void) => {\r\n      dispatch(fetchIngredientsRequest());\r\n      try {\r\n        const response = await fetch(`${BASE_URL}/ingredients`);\r\n        const data = await response.json();\r\n        dispatch(fetchIngredientsSuccess(data.data));\r\n      } catch (error: any) {\r\n        dispatch(fetchIngredientsFailure(error.message));\r\n      }\r\n    };\r\n};"],"mappings":"AACA,SAASA,QAAQ,QAAQ,cAAc;AAGvC,OAAO,MAAMC,yBAAyB,GAAG,2BAA2B;AACpE,OAAO,MAAMC,yBAAyB,GAAG,2BAA2B;AACpE,OAAO,MAAMC,yBAAyB,GAAG,2BAA2B;;AAEpE;AACA,WAAYC,WAAW,0BAAXA,WAAW;EAAXA,WAAW;EAAXA,WAAW;EAAXA,WAAW;EAAA,OAAXA,WAAW;AAAA;AAyBvB;;AAEA,OAAO,MAAMC,uBAAuB,GAAGA,CAAA,MAAsC;EAC3EC,IAAI,EAAEF,WAAW,CAACH;AACpB,CAAC,CAAC;AAEF,OAAO,MAAMM,uBAAuB,GAClCC,WAAsB,KACa;EACnCF,IAAI,EAAEF,WAAW,CAACF,yBAAyB;EAC3CO,OAAO,EAAED;AACX,CAAC,CAAC;AAEF,OAAO,MAAME,uBAAuB,GAClCC,KAAa,KACqB;EAClCL,IAAI,EAAEF,WAAW,CAACD,yBAAyB;EAC3CM,OAAO,EAAEE;AACX,CAAC,CAAC;AAEF,OAAO,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAClC,OAAO,MAAOC,QAAkD,IAAK;IACnEA,QAAQ,CAACR,uBAAuB,CAAC,CAAC,CAAC;IACnC,IAAI;MACF,MAAMS,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGf,QAAQ,cAAc,CAAC;MACvD,MAAMgB,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClCJ,QAAQ,CAACN,uBAAuB,CAACS,IAAI,CAACA,IAAI,CAAC,CAAC;IAC9C,CAAC,CAAC,OAAOL,KAAU,EAAE;MACnBE,QAAQ,CAACH,uBAAuB,CAACC,KAAK,CAACO,OAAO,CAAC,CAAC;IAClD;EACF,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
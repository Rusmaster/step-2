{"ast":null,"code":"import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { BASE_URL } from \"../constants\";\nconst generateOrderId = () => {\n  return Math.floor(1000 + Math.random() * 9000).toString();\n};\nexport const submitOrder = createAsyncThunk(\"order/submitOrder\", async (orderData, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch(`${BASE_URL}/orders`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        ingredients: orderData.ingredients\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`Ошибка ${response.status}: ${response.statusText}`);\n    }\n    const data = await response.json();\n    return {\n      orderId: generateOrderId()\n    };\n    //return data;\n  } catch (error) {\n    return rejectWithValue(`Ошибка ${error.message}`); // добавил проверку на ошибку сервера\n  }\n});","map":{"version":3,"names":["createAsyncThunk","BASE_URL","generateOrderId","Math","floor","random","toString","submitOrder","orderData","rejectWithValue","response","fetch","method","headers","body","JSON","stringify","ingredients","ok","Error","status","statusText","data","json","orderId","error","message"],"sources":["C:/YandexPracticum/step-2 — копия (3) — копия/src/services/actions/orderActions.ts"],"sourcesContent":["import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { BASE_URL } from \"../constants\"; \r\n\r\ninterface OrderResponse {\r\n  orderId: string;\r\n}\r\n\r\nconst generateOrderId = (): string => {\r\n  return Math.floor(1000 + Math.random() * 9000).toString();\r\n};\r\n\r\nexport const submitOrder = createAsyncThunk<\r\n  OrderResponse,\r\n  { ingredients: string[] }\r\n>(\"order/submitOrder\", async (orderData, { rejectWithValue }) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/orders`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ ingredients: orderData.ingredients }),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error(`Ошибка ${response.status}: ${response.statusText}`);\r\n    }\r\n    const data = await response.json();\r\n    return { orderId: generateOrderId() };\r\n    //return data;\r\n  } catch (error: any) {\r\n    return rejectWithValue(`Ошибка ${error.message}`); // добавил проверку на ошибку сервера\r\n  }\r\n});\r\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,kBAAkB;AACnD,SAASC,QAAQ,QAAQ,cAAc;AAMvC,MAAMC,eAAe,GAAGA,CAAA,KAAc;EACpC,OAAOC,IAAI,CAACC,KAAK,CAAC,IAAI,GAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAACC,QAAQ,CAAC,CAAC;AAC3D,CAAC;AAED,OAAO,MAAMC,WAAW,GAAGP,gBAAgB,CAGzC,mBAAmB,EAAE,OAAOQ,SAAS,EAAE;EAAEC;AAAgB,CAAC,KAAK;EAC/D,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGV,QAAQ,SAAS,EAAE;MACjDW,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,WAAW,EAAET,SAAS,CAACS;MAAY,CAAC;IAC7D,CAAC,CAAC;IACF,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,UAAUT,QAAQ,CAACU,MAAM,KAAKV,QAAQ,CAACW,UAAU,EAAE,CAAC;IACtE;IACA,MAAMC,IAAI,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAAC,CAAC;IAClC,OAAO;MAAEC,OAAO,EAAEtB,eAAe,CAAC;IAAE,CAAC;IACrC;EACF,CAAC,CAAC,OAAOuB,KAAU,EAAE;IACnB,OAAOhB,eAAe,CAAC,UAAUgB,KAAK,CAACC,OAAO,EAAE,CAAC,CAAC,CAAC;EACrD;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}